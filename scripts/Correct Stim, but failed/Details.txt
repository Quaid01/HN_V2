#= template

image = [
    1 1 1;
    1 1 1;
    1 1 1;
] 
=#

i1 = [
    1 1 1;
    1 1 1;
    1 1 1;
] 

i2 = [
    1 -1 1;
    -1 1 -1;
    1 -1 1;
] 


# Take image matrix and turn it into a vector with the rows being coancenated at their endpoints
# ex: [row1,row2,row3]

sim_time = 4
steps = 1500
parameters = Dict{String, Any}(
    "images" => [i1,i2],
    "sim_time" => sim_time,
    "steps" => steps,
    "iterations" => 100, #Num of times attempted
    "num_agitations" => 1,
    "scaling" => 1.0,
    "delta" => -1* sim_time/steps,
    # This is the region that we will provide and the machine must keep this region constant
    # Will be a vector of tuples which are (row, col, state)
    "initial_stimuli" => [(2,2,1)]
)

Correct stimuli given, but the same issue for failure, some nodes just do not move. This causes the system to stay stagnant and not converge to a proper solution. The ones that say FAIL are failures, the one that says "last" is an attempt that did converge properly. Note that all nodes move in the one that converges, while the ones that fail do not.